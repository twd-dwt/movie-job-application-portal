/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Applicant as PrismaApplicant,
  Application as PrismaApplication,
} from "@prisma/client";

export class ApplicantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicant.count(args);
  }

  async applicants<T extends Prisma.ApplicantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicantFindManyArgs>
  ): Promise<PrismaApplicant[]> {
    return this.prisma.applicant.findMany<Prisma.ApplicantFindManyArgs>(args);
  }
  async applicant<T extends Prisma.ApplicantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicantFindUniqueArgs>
  ): Promise<PrismaApplicant | null> {
    return this.prisma.applicant.findUnique(args);
  }
  async createApplicant<T extends Prisma.ApplicantCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicantCreateArgs>
  ): Promise<PrismaApplicant> {
    return this.prisma.applicant.create<T>(args);
  }
  async updateApplicant<T extends Prisma.ApplicantUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicantUpdateArgs>
  ): Promise<PrismaApplicant> {
    return this.prisma.applicant.update<T>(args);
  }
  async deleteApplicant<T extends Prisma.ApplicantDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicantDeleteArgs>
  ): Promise<PrismaApplicant> {
    return this.prisma.applicant.delete(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.applicant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }
}
